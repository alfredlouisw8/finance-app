// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Advisor {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

model Client {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  name                  String?
  email                 String?           @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  role                  String?
  riskProfile           String?
  equityAllocation      Int?
  fixedIncomeAllocation Int?
  isAdmin               Boolean           @default(false)
  advisorId             String?           @db.ObjectId
  users                 User[]            @relation("Advisors")
  advisor               User?             @relation("Advisors", fields: [advisorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currentPortfolio      Portfolio?        @relation("UserCurrentPortfolio")
  proposedPortfolio     Portfolio?        @relation("UserProposedPortfolio")
  // Ensure the IDs are correctly associated if needed
  currentPortfolioId    String?           @db.ObjectId
  proposedPortfolioId   String?           @db.ObjectId
  HoldingUniverse       HoldingUniverse[]
}

model Portfolio {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cash      Float     @default(0)
  holdings  Holding[]

  userCurrent    User?   @relation("UserCurrentPortfolio", fields: [userIdCurrent], references: [id])
  userIdCurrent  String? @unique @db.ObjectId
  userProposed   User?   @relation("UserProposedPortfolio", fields: [userIdProposed], references: [id])
  userIdProposed String? @unique @db.ObjectId
}

model Holding {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticker          String
  name            String?
  averageBuyPrice Float
  amount          Float
  type            HoldingType
  portfolio       Portfolio   @relation(fields: [portfolioId], references: [id])
  portfolioId     String      @db.ObjectId

  @@unique([ticker, portfolioId])
}

model HoldingUniverse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticker String
  name   String?
  type   HoldingType
  user   User        @relation(fields: [userId], references: [id])
  userId String      @db.ObjectId

  @@unique([ticker, userId])
}

enum HoldingType {
  US_STOCK
  AU_STOCK
  ID_STOCK
  ID_BOND
}

model ApplicationSetting {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  value String
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
